---
import '@root/styles/global.css';
import Header from '@root/components/astro/Header.astro';
import Footer from '@root/components/astro/Footer.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: 'website' | 'article';
  publishDate?: Date;
  author?: string;
  tags?: string[];
}

const {
  title,
  description = 'Secure password splitting using cryptographic secret sharing. All processing happens locally in your browser for maximum privacy.',
  image = '/og-image.webp',
  type = 'website',
  publishDate,
  author = 'Password Split Team',
  tags = [],
} = Astro.props;

const canonicalUrl = new URL(Astro.url.pathname, Astro.site);
const ogImage = new URL(image, Astro.site);
const siteName = 'Password Split';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/webp" href="/logo.webp" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    {tags.length > 0 && <meta name="keywords" content={tags.join(', ')} />}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="en_US" />
    {type === 'article' && publishDate && <meta property="article:published_time" content={publishDate.toISOString()} />}
    {type === 'article' && author && <meta property="article:author" content={author} />}
    {type === 'article' && tags.map(tag => <meta property="article:tag" content={tag} />)}

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage} />

    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />

    <!-- JSON-LD Structured Data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        '@context': 'https://schema.org',
        '@type': type === 'article' ? 'Article' : 'WebSite',
        name: title,
        description: description,
        url: canonicalUrl.toString(),
        image: ogImage.toString(),
        author: {
          '@type': 'Organization',
          name: author,
        },
        publisher: {
          '@type': 'Organization',
          name: siteName,
          logo: {
            '@type': 'ImageObject',
            url: new URL('/logo.webp', Astro.site).toString(),
          },
        },
        ...(type === 'article' &&
          publishDate && {
            datePublished: publishDate.toISOString(),
            dateModified: publishDate.toISOString(),
          }),
        ...(type === 'website' && {
          potentialAction: {
            '@type': 'SearchAction',
            target: {
              '@type': 'EntryPoint',
              urlTemplate: canonicalUrl.toString() + '?q={search_term_string}',
            },
            'query-input': 'required name=search_term_string',
          },
        }),
      })}
    />
  </head>
  <body class="min-h-screen bg-gray-50 transition-colors duration-300 dark:bg-gray-900">
    <div id="password_set_indication" style="color: red;"></div>
    <Header />

    <main>
      <slot />
    </main>

    <!-- Mobile Menu Script -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function () {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
          mobileMenuButton.addEventListener('click', function () {
            mobileMenu.classList.toggle('hidden');
          });

          // Close mobile menu when clicking on links
          const mobileLinks = mobileMenu.querySelectorAll('a');
          mobileLinks.forEach(link => {
            link.addEventListener('click', function () {
              mobileMenu.classList.add('hidden');
            });
          });

          // Close mobile menu when clicking outside
          document.addEventListener('click', function (event) {
            if (!mobileMenuButton.contains(event.target) && !mobileMenu.contains(event.target)) {
              mobileMenu.classList.add('hidden');
            }
          });
        }
      });
    </script>

    <!-- Password Status Script -->
    <script>
      import { isCheckoutPasswordSet } from '@root/backend/backend';

      if (isCheckoutPasswordSet()) {
        document.getElementById('password_set_indication')!.innerHTML = 'password set';
      }
    </script>

    <Footer />
  </body>
</html>
